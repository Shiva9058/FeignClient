package com.test;

import static org.hamcrest.CoreMatchers.notNullValue;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.awt.PageAttributes.MediaType;
import java.util.ArrayList;

import javax.validation.spi.ValidationProvider;

import org.aspectj.lang.annotation.Before;
import org.assertj.core.error.ShouldHaveSameSizeAs;
import org.junit.jupiter.api.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MockMvcBuilder;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.mysql.cj.x.protobuf.MysqlxResultset.ContentType_BYTES;
import com.test.controller.MyController;
import com.test.dao.UserRepo;
import com.test.entity.User;
import com.test.service.UserService;

import antlr.collections.List;
import ch.qos.logback.core.net.ObjectWriter;

@RunWith(MockitoJUnitRunner.class)
@WebMvcTest(MyController.class)
  public class GlobalExceptionHandlerApplicationTests {
	 private MockMvc mockMvc;
     ObjectMapper objectMapper=new ObjectMapper();
     ObjectWriter objectWriter=(ObjectWriter) objectMapper.writer();
     @Mock
     private UserRepo userRepo;
     //@Mock
     //private UserService userService;
     @InjectMocks
     private MyController myController;
     User user1=new User(10, "Shiv", "fr","245304");
     User user2=new User(12, "Ami", "Bihar","201203");
     User user3=new User(13, "Aru", "hyderabad","201204");
	private GlobalExceptionHandlerApplicationTests testClass;
	private String expression;
	private String urlTemplate;
     @Before(value = "for")
     public void setup()
     {
    	 MockitoAnnotations.initMocks(testClass=this);
    	 this.mockMvc=MockMvcBuilders.standaloneSetup(myController).build();
     }
     @Test
     public void getAllUsers()
     {
    	 ArrayList<User> list=new ArrayList<User>();
    	 list.add(user1);
    	 list.add(user2);
    	 list.add(user3);
    	 when(userRepo.findAll()).thenReturn(list);
    		}
    			
     
	/*@Test
	public void createUser()throws Exception
	{
		User user1=new User();
		  user1.setAddress("or");
		  user1.setId(17);
		  user1.setName("Saurav");
		  user1.setPincode("201201");
		  
	}*/
	public static String asJsonString(final Object obj) {
	    try {
	        return new ObjectMapper().writeValueAsString(obj);
	    } catch (Exception e) {
	        throw new RuntimeException(e);
	    }
	}
}
